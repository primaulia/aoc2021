require_relative '../vents'

describe '#process' do
  let(:input) {
    "0,9 -> 5,9
    8,0 -> 0,8
    9,4 -> 3,4
    2,2 -> 2,1
    7,0 -> 7,4
    6,4 -> 2,0
    0,9 -> 2,9
    3,4 -> 1,4
    0,0 -> 8,8
    5,5 -> 8,2"
  }
  
  let(:output) {
    [
      {
        x: [0, 5],
        y: [9, 9]
      },
      {
        x: [8, 0],
        y: [0, 8]
      },
      {
        x: [9, 3],
        y: [4, 4]
      },
      {
        x: [2, 2],
        y: [2, 1]
      },
      {
        x: [7, 7],
        y: [0, 4]
      },
      {
        x: [6, 2],
        y: [4, 0]
      },
      {
        x: [0, 2],
        y: [9, 9]
      },
      {
        x: [3, 1],
        y: [4, 4]
      },
      {
        x: [0, 8],
        y: [0, 8]
      },
      {
        x: [5, 8],
        y: [5, 2]
      }
    ]
  }
  
  it 'should convert all input to an array of x and y' do
    expect(process(input)).to eq(output)    
  end
end

describe '#filter_lines' do
  let(:input) {
    [
      {
        x: [0, 5],
        y: [9, 9]
      },
      {
        x: [8, 0],
        y: [0, 8]
      },
      {
        x: [9, 3],
        y: [4, 4]
      },
      {
        x: [2, 2],
        y: [2, 1]
      },
      {
        x: [7, 7],
        y: [0, 4]
      },
      {
        x: [6, 2],
        y: [4, 0]
      },
      {
        x: [0, 2],
        y: [9, 9]
      },
      {
        x: [3, 1],
        y: [4, 4]
      },
      {
        x: [0, 0],
        y: [8, 8]
      },
      {
        x: [5, 8],
        y: [5, 2]
      }
    ]
  }
  
  let(:output) {
    [
      {
        x: [0, 5],
        y: [9, 9]
      },
      {
        x: [8, 0],
        y: [0, 8]
      },
      {
        x: [9, 3],
        y: [4, 4]
      },
      {
        x: [2, 2],
        y: [2, 1]
      },
      {
        x: [7, 7],
        y: [0, 4]
      },
      {
        x: [6, 2],
        y: [4, 0]
      },
      {
        x: [0, 2],
        y: [9, 9]
      },
      {
        x: [3, 1],
        y: [4, 4]
      },
      {
        x: [0, 0],
        y: [8, 8]
      },
      {
        x: [5, 8],
        y: [5, 2]
      }
    ]
  }
  
  it 'should filter only the horizontal and vertical lines' do
    expect(filter_lines(input)).to eq(output)    
  end
end

describe "#fill_row" do
  let(:coordinates) {
    {
      x: [0, 5],
      y: [9, 9]
    }
  }

  let(:map) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0]
    ]
  }

  let(:output) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [1,1,1,1,1,1,0,0,0,0],
    ]
  }

  it 'should fill the row with the given coordinates' do
    expect(fill_row(coordinates, map)).to eq(output)    
  end
end

describe "#fill_column" do
  let(:coordinates) {
    {
      x: [2, 2],
      y: [2, 1]
    }
  }

  let(:map) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0]
    ]
  }

  let(:output) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,1,0,0,0,0,0,0,0],
      [0,0,1,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
    ]
  }

  it 'should fill the row with the given coordinates' do
    expect(fill_column(coordinates, map)).to eq(output)    
  end
end

describe "#fill_diagonal" do
  let(:coordinates) {
    {
      x: [1, 3],
      y: [1, 3]
    }
  }

  let(:coordinates2) {
    {
      x: [9, 7],
      y: [7, 9]
    }
  }

  let(:coordinates3) {
    {
      x: [0, 2],
      y: [2, 0]
    }
  }

  let(:map) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0]
    ]
  }

  let(:map2) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0]
    ]
  }

  let(:map3) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0]
    ]
  }

  let(:output) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,1,0,0,0,0,0,0,0,0],
      [0,0,1,0,0,0,0,0,0,0],
      [0,0,0,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
    ]
  }

  let(:output2) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,1],
      [0,0,0,0,0,0,0,0,1,0],
      [0,0,0,0,0,0,0,1,0,0],
    ]
  }

  let(:output3) {
    [
      [0,0,1,0,0,0,0,0,0,0],
      [0,1,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
    ]
  }

  it 'should fill the row with the given coordinates' do
    expect(fill_diagonal(coordinates, map)).to eq(output)
    expect(fill_diagonal(coordinates2, map2)).to eq(output2)
    # binding.pry
    expect(fill_diagonal(coordinates3, map3)).to eq(output3)
  end
end

describe "#fill_cells" do
  let(:coordinates) {
    [
      {
        x: [0, 5],
        y: [9, 9]
      },
      {
        x: [0, 2],
        y: [9, 9]
      },
    ]
  }

  let(:coordinates2) {
    [
      {
        x: [0, 5],
        y: [9, 9]
      },
      {
        x: [9, 3],
        y: [4, 4]
      },
      {
        x: [2, 2],
        y: [2, 1]
      },
      {
        x: [7, 7],
        y: [0, 4]
      },
      {
        x: [0, 2],
        y: [9, 9]
      },
    ]
  }

  let(:map) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0]
    ]
  }

  let(:output) {
    [
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [2,2,2,1,1,1,0,0,0,0],
    ]
  }

  let(:output2) {
    [
      [0,0,0,0,0,0,0,1,0,0],
      [0,0,1,0,0,0,0,1,0,0],
      [0,0,1,0,0,0,0,1,0,0],
      [0,0,0,0,0,0,0,1,0,0],
      [0,0,0,1,1,1,1,2,1,1],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0],
      [2,2,2,1,1,1,0,0,0,0],
    ]
  }

  it 'should fill the row with the given coordinates' do
    expect(fill_cells(coordinates, map)).to eq(output)
  end

  it 'should fill the row and column with the given coordinates' do
    expect(fill_cells(coordinates2, map)).to eq(output2)
  end
end

describe "#diagonal?" do
  let(:coordinate) {
    {
      x: [1, 3],
      y: [1, 3]
    }
  }

  let(:coordinate2) {
    {
      x: [9, 7],
      y: [7, 9]
    }
  }

  let(:coordinate3) {
    {
      x: [62, 844],
      y: [963, 181]
    }
  }

  it "should return true for a 45deg coordinates" do
    expect(diagonal?(coordinate)).to be true
    expect(diagonal?(coordinate2)).to be true
    expect(diagonal?(coordinate3)).to be true
  end
end

describe "#count_overlaps" do
  let(:input) {
    [
      {
        x: [0, 5],
        y: [9, 9]
      },
      {
        x: [9, 3],
        y: [4, 4]
      },
      {
        x: [2, 2],
        y: [2, 1]
      },
      {
        x: [7, 7],
        y: [0, 4]
      },
      {
        x: [0, 2],
        y: [9, 9]
      },
      {
        x: [3, 1],
        y: [4, 4]
      },
    ]
  }

  let(:input2) {
    [
      {
        x: [0, 5],
        y: [9, 9]
      },
      {
        x: [8, 0],
        y: [0, 8]
      },
      {
        x: [9, 3],
        y: [4, 4]
      },
      {
        x: [2, 2],
        y: [2, 1]
      },
      {
        x: [7, 7],
        y: [0, 4]
      },
      {
        x: [6, 2],
        y: [4, 0]
      },
      {
        x: [0, 2],
        y: [9, 9]
      },
      {
        x: [3, 1],
        y: [4, 4]
      },
      {
        x: [0, 0],
        y: [8, 8]
      },
      {
        x: [5, 8],
        y: [5, 2]
      }
    ]
  }

  it 'should count the overlaps' do
    expect(count_overlaps(input)).to eq(5)
    expect(count_overlaps(input2)).to eq(12)
  end
end